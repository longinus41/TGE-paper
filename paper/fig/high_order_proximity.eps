%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 1001.000000 256.000000
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1001 256
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1001 256
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /n put
dup 34 /o put
dup 35 /d put
dup 36 /e put
dup 37 /space put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<
74727565000900000000000063767420000000000000009C000000186670676D00000000000000B400000428676C796600000000000004DC000004D86865616400000000000009B4000000366868656100000000000009EC00000024686D74780000000000000A100000001C6C6F63610000000000000A2C000000106D6178700000000000000A3C00000020707265700000000000000A5C0000004D14000014004B005A00000011FF3A000B0205000C02CA0011B800002C4BB800095058B101018E59B801FF85B844001DB9000900035F5E2DB800012C2020456944B001602DB800022CB800012A212DB800032C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800042C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800052C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800062C2020456944B001602020457D691844B001602DB800072CB800062A2DB800082C4B20B003265358B0801BB040598A8A20B003265358B0022621B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B80003265358B0032545B8014050582321B8014023211BB003254523212321591B2159442DB800092C4B535845441B2121592DB8000A2C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB8000B2C2020456944B001602DB8000C2CB8000B2A212DB8000D2C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB8000E2C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB8000F2C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800102C2020456944B001602020457D691844B001602DB800112CB800102A2DB800122C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800132C4B535845441B2121592DB800142C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800152C2020456944B001602DB800162CB800152A212DB800172C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800182C2046B00425465258238A592046206A6164B0042546


00>] def
/CharStrings 7 dict dup begin
/.notdef 0 def
/space 1 def
/d 2 def
/e 3 def
/n 4 def
/o 5 def
/uni2B91 6 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C977ACEB10D7B7CCAA782B3E10A4BEAFD6991C7A5E7DAF786CA93E9C7130DEBD28BA4C9AFE439E5989355A2D991A3C3DD3969DFF96D799CE7A3D70FB31B7161B2FFE548FD50365A5C79771B2904426AD58B6D1C1127A16EEBF1451F4CEA096ED001160249F9C121057616F66FAA5E987A3D393A8DE40BC55B3BE12882124252E1476817E7999AE633CB57B43287D5144E92245834FB68B8231D09BF2CD64E22750B3E71C86C702CBB74D4E0B2FB36EAC36CE5D2DF155DB2D5A7484338CB314F9650F0FBBDBF35499E6AB422B043961238BC7673688995570149E8409947E52FC67408D5CC66676F3E0539FC47BE5962848710EBA709B7F308C7AFEFEC57D2AC7378D3D6C23F41AD437BF2D992953C5A4D1E1C1C9BA5B19B23D2289EBD2C5CB1A20139DCE2B14B9EA4E0F63F201B015939BDF04056D326F8DD589734187690747E70969C857080D7EE20F665CB399691491B9376B87B56069A81E90BC2567FFB80D6AB5F06385138065F88FB533650435FFC9157614BB6F9A36231A1F5C8EDF934BA58B8F91980982B964AB52DFFB5827E6B9F48F69CEDA2107A5A71C5503B53C8506A81082736B7BA6965032546BBD03236A6D32D11A21E7BE3090B14296A953E58E431D0F7935E73E45EC20C01C48E5416A45270E527B144EDEE7A5DD454048D223E386C81E336500594273227CB3EC7F188E453D35C04753B6ABA32C3DD8D294CCA9C5ABE5C3FB795AC6698618A27DD26B1ACB565EB229E1C7E305533D27E6363
B044F6AA14CB2251B074528D5B933813847AA2E685D21430BCD287B27FEF29721F265C8A794EE33F9A201D8B3214642F310C8B5461303D346DC95AC473E05082517B85A4C91E9D93506750DA4B9DB6735EECF399C90A73A1A817AA1435937E03F55691A2FE88463305DC135597524A2DBD6559EDC0B48A60CC3BA8DCAF91323AA71F745160D6916EDEEFC6A76F22F75FC7B4588250D2F4FD0C8191E1CB452F7B9BF3B53997254AFAC2BB2BB350E14043117E002CF33922DE31068647AB86E6E8763EE8F23D4B6BED7A3287000679B03E743263A1D520C9A03AB3A93B478D7E136CD95C0844EB6D6E23FAA720E6F1769050A76D5CD17ABEF4EBC4FF899ED36E4019412EA06C498BAC5B9895DD850AB2E72CA3987668FEB4ADF552470B862F40B05F2368017765AB2CC29C8B5A0D2D0D581464232311CA23D83C89B1F89BE12DB3469A7E5EEE6DFAD4301E5266BBAFB421A9C27DCFE61A4F3854D2D7E0491C9CA166F55EB7091F55C0304E64D6DC74EE9E9109D02BBCF68D53F5A70C3CFFCC94560CD4DCFADB3E3E09FC9B80E98C4B76E9AFF5754DA1D8779E732187B5B5ABF27FC7C58E111ABBE6DDD7E1D1CE1E7D84A7BBB018B61E369C775FA7AA7942D784DAECF741DE4B64A4F74ED51B6535BC5A9AC2927A59F751762DE4EAB9A7BDB72B679BDC2A87C329F53F60EDFA6152B7DAC2CE7CDDD933E37AC8F4B84EE0DA18A998C70BA222ADE26BB64DD9A02113B28510D9D891C1923F33FACE36AE2A803443BF56D2B61505D0EACDA995DA8D00B9EB7538B30F5ACE6A20634A44EF9DDF1B4764881818A8E7E7C28AB148B5EE025799533E4D05D5ECECB9049E17A7BA5310225E33996F81820DE9D1CBBB57E0A037B92BFADD61A955F9306AF3BB7F25E58A7DCE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
%RBIBeginFontSubset: HelveticaNeue-Italic
%!FontType1-1.0: HelveticaNeue-Italic 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue-Italic def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /i put
dup 34 /k put
dup 35 /j put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -993 1 index div -481 2 index div 1511 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<
74727565000900000000000063767420000000000000009C0000001C6670676D00000000000000B8000002C6676C79660000000000000380000002486865616400000000000005C80000003668686561000000000000060000000024686D74780000000000000624000000146C6F636100000000000006380000000C6D6178700000000000000644000000207072657000000000000006640000007614000014005000470055005F00000010FF3B000C0205000C02CA0011B800002C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800012C2020456944B001602DB800022CB800012A212DB800032C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800042C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800052C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800062C2020456944B001602020457D691844B001602DB800072CB800062A2DB800082C4B20B003265358B0801BB040598A8A20B003265358B0022621B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B80003265358B0032545B8014050582321B8014023211BB003254523212321591B2159442DB800092C4B535845441B2121592DB8000A2C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB8000B2C2020456944B001602DB8000C2CB8000B2A212DB8000D2C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB8000E2C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB8000F2C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800102C2020456944B001602020457D691844B001602DB800112CB800102A2DB800122C4B20B003265358B0401BB000598A8A20B0032653582321B0808A8A1B8A235920B0032653582321B800C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800132C4B535845441B2121592D000000020032000001CE02C800030007005FB8000A2BB800082FB800002FB8000810B80006D0B800062FB80002DCB8000010B80004DCB80009DC00B800014558B800042F1BB90004000C3E59B800014558B800052F1BB9000500063E59B8000410B80000DCB8000510B900020003F43031012111211311211101AFFEA2015E1FFE64

00>] def
/CharStrings 5 dict dup begin
/.notdef 0 def
/i 1 def
/j 2 def
/k 3 def
/u20BC 4 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-993 -481 1511 1077}def
/UniqueID 4039226 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C959DCA2B25064CB2EE653C8C5E0D08068DD956094993D87692D1893E7882B3267FBEDEB677437CF14D1C34FD3E8DFE75D6B63DBDEE6A1CE1623E98A63E314C01ACF12A7A90D42F904B79B9BFE713FA20E044C49024A982EFEDD2ED52FA13C5E8526D19C065E6B93591C14CA34F2645B669AC0FC105A92A963BBCFA48FD6D077AC18D5ABE3F5CF4279D8B2403A067DB041D5E8976CAB16B97880A228571A52856927D6609D3B252D1348BA055094173E5D1D6A813DF8DA9A7F8293E05C75886BF14D87E908F08CB519150E20290BFFC036B40874415B27189A71C1D72E9EC11C07AAE9851200F550128326AD3B4AB743F25E060E3A6DFA5FF6F2F278A358009A3C38BCDAD841857B38826F0A18B7603AD77094141FD0E9AC562AAA24EEA9B9FFA530B6C7A6F7D19331B76DC1346CAFCFD2E378705E7F9815FAD191354B9D85028544B346A416A48C1B2CAB1C86E7F1F298A6E4D253D56973DE61FD67E014776C97B1E16BF2EF8494B2A14D7D5F36C25C3DD10C1A9FC4A8DE8880E5FC14F4F6C09D0CB30722ECCCFA616EBB53B8BB1D4A7523B1AA9C3F495BF2F94B4FE4782CD6103273C673BBB18A611CB734944C3FADA40324A0FE94B7653FF070A94791F1DABCA21FFE4627A18723624B753CFB6E199A76AF286776259FD4F0C604016772C14B65A25423C77550A19C5AAD03237F89C29BAC3DBDBA42A23072B64560415CBF24A7014C83DFB7F129E1785FADD8A5351B0F90680B1A6D2C737AAC76DBE435392F4
8B3D517F0305FB76AD9351E4438A258212926740AAA056CE2FE013E6B3AC094332735F3BED14DACEF2DC509B912D60912EB5D095D4674A13A3A481582A7A38
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue-Italic cguidfix
/F2.1/HelveticaNeue-Italic renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0.75 0.75 1 sc
q
0 0 1001 256 rc
68.796341 112.73554 m
53.286999 103.06691 28.141397 103.06691 12.63205 112.73554 c
-2.8773766 122.40411 -2.8773766 138.07997 12.63205 147.74854 c
28.141397 157.41718 53.286999 157.41718 68.796341 147.74854 c
84.305771 138.07997 84.305771 122.40411 68.796341 112.73554 c
f
2 w
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -23 406 cm
91.796341 293.26447 m
76.286995 302.93307 51.141396 302.93307 35.63205 293.26447 c
20.122623 283.59589 20.122623 267.92004 35.63205 258.25146 c
51.141396 248.58282 76.286995 248.58282 91.796341 258.25146 c
107.30577 267.92004 107.30577 283.59589 91.796341 293.26447 c
S
0 i
1 1 0.75 sc
CM
226.79634 112.73554 m
211.287 103.06691 186.1414 103.06691 170.63205 112.73554 c
155.12262 122.40411 155.12262 138.07997 170.63205 147.74854 c
186.1414 157.41718 211.287 157.41718 226.79634 147.74854 c
242.30577 138.07997 242.30577 122.40411 226.79634 112.73554 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -23 406 cm
249.79634 293.26447 m
234.287 302.93307 209.1414 302.93307 193.63205 293.26447 c
178.12262 283.59589 178.12262 267.92004 193.63205 258.25146 c
209.1414 248.58282 234.287 248.58282 249.79634 258.25146 c
265.30576 267.92004 265.30576 283.59589 249.79634 293.26447 c
S
0 i
0.75 0.75 1 sc
CM
375.36795 112.73554 m
359.85861 103.06691 334.71301 103.06691 319.20364 112.73554 c
303.69424 122.40411 303.69424 138.07997 319.20364 147.74854 c
334.71301 157.41718 359.85861 157.41718 375.36795 147.74854 c
390.87738 138.07997 390.87738 122.40411 375.36795 112.73554 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -23 406 cm
398.36795 293.26447 m
382.85861 302.93307 357.71301 302.93307 342.20364 293.26447 c
326.69424 283.59589 326.69424 267.92004 342.20364 258.25146 c
357.71301 248.58282 382.85861 248.58282 398.36795 258.25146 c
413.87738 267.92004 413.87738 283.59589 398.36795 293.26447 c
S
0 i
0.75 0.75 1 sc
CM
144.79634 208.73553 m
129.287 199.06691 104.1414 199.06691 88.63205 208.73553 c
73.122627 218.40411 73.122627 234.07997 88.63205 243.74854 c
104.1414 253.41718 129.287 253.41718 144.79634 243.74854 c
160.30577 234.07997 160.30577 218.40411 144.79634 208.73553 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -23 406 cm
167.79634 197.26447 m
152.287 206.93309 127.1414 206.93309 111.63205 197.26447 c
96.122627 187.59589 96.122627 171.92003 111.63205 162.25146 c
127.1414 152.58282 152.287 152.58282 167.79634 162.25146 c
183.30577 171.92003 183.30577 187.59589 167.79634 197.26447 c
S
0 i
0.75 0.75 1 sc
CM
293.79636 212.23553 m
278.28699 202.56691 253.1414 202.56691 237.63205 212.23553 c
222.12262 221.90411 222.12262 237.57997 237.63205 247.24854 c
253.1414 256.91718 278.28699 256.91718 293.79636 247.24854 c
309.30576 237.57997 309.30576 221.90411 293.79636 212.23553 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -23 406 cm
316.79636 193.76447 m
301.28699 203.43309 276.14139 203.43309 260.63205 193.76447 c
245.12262 184.09589 245.12262 168.42003 260.63205 158.75146 c
276.14139 149.08282 301.28699 149.08282 316.79636 158.75146 c
332.30576 168.42003 332.30576 184.09589 316.79636 193.76447 c
S
104.42841 275.75797 m
168.09998 275.75797 l
S
0 i
CM
154.69998 130.24203 m
145.09998 133.84204 l
145.09998 126.64204 l
h
154.69998 130.24203 m
f
0 J
0 j
1 0 0 -1 -23 406 cm
177.69998 275.75797 m
168.09998 272.15796 l
168.09998 279.35797 l
h
177.69998 275.75797 m
S
1 J
1 j
0.60000002 i
272.74747 199.96976 m
244.88612 241.34592 l
S
0 i
CM
216.52412 156.69112 m
224.87224 162.64334 l
218.90001 166.66484 l
h
216.52412 156.69112 m
f
0 J
0 j
1 0 0 -1 -23 406 cm
239.52412 249.30888 m
247.87224 243.35666 l
241.90001 239.33516 l
h
239.52412 249.30888 m
S
1 J
1 j
0.60000002 i
159.08488 202.43584 m
193.96513 243.27126 l
S
0 i
CM
177.2002 155.42915 m
173.70248 165.06689 l
168.2278 160.39059 l
h
177.2002 155.42915 m
f
0 J
0 j
1 0 0 -1 -23 406 cm
200.2002 250.57085 m
196.70248 240.93311 l
191.2278 245.60941 l
h
200.2002 250.57085 m
S
1 J
1 j
0.60000002 i
261.42841 266 m
322.10001 266 l
S
0 i
CM
308.70001 140 m
299.10001 143.60001 l
299.10001 136.39999 l
h
308.70001 140 m
f
0 J
0 j
1 0 0 -1 -23 406 cm
331.70001 266 m
322.10001 262.39999 l
322.10001 269.60001 l
h
331.70001 266 m
S
/Cs2 SC
0 sc
1 0 0 -1 198.64259 131.24203 cm
/F1.1[ 16 0 0 -16 0 0]sf
-22.08 5.776001 m
(!"#$%)[ 8.896000 9.184000 9.488000 8.592000 0.000000 ] xS
/F2.1[ 16 0 0 -16 0 0]sf
18.528 5.776001 m
(!)s
/Cs1 SC
0.75 0.75 1 sc
CM
679.79633 112.73554 m
664.28699 103.06691 639.14142 103.06691 623.63208 112.73554 c
608.12262 122.40411 608.12262 138.07997 623.63208 147.74854 c
639.14142 157.41718 664.28699 157.41718 679.79633 147.74854 c
695.30579 138.07997 695.30579 122.40411 679.79633 112.73554 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -23 406 cm
702.79633 293.26447 m
687.28699 302.93307 662.14142 302.93307 646.63208 293.26447 c
631.12262 283.59589 631.12262 267.92004 646.63208 258.25146 c
662.14142 248.58282 687.28699 248.58282 702.79633 258.25146 c
718.30579 267.92004 718.30579 283.59589 702.79633 293.26447 c
S
0 i
0.75 0.75 1 sc
CM
150.79634 9.2355385 m
135.287 -0.43308806 110.1414 -0.43308806 94.63205 9.2355385 c
79.122627 18.904116 79.122627 34.579964 94.63205 44.248543 c
110.1414 53.917168 135.287 53.917168 150.79634 44.248543 c
166.30577 34.579964 166.30577 18.904116 150.79634 9.2355385 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -23 406 cm
173.79634 396.76447 m
158.287 406.43307 133.1414 406.43307 117.63205 396.76447 c
102.12263 387.09589 102.12263 371.42004 117.63205 361.75146 c
133.1414 352.08282 158.287 352.08282 173.79634 361.75146 c
189.30577 371.42004 189.30577 387.09589 173.79634 396.76447 c
S
0 i
0.75 0.75 1 sc
CM
294.79636 9.2355385 m
279.28699 -0.43308806 254.1414 -0.43308806 238.63205 9.2355385 c
223.12262 18.904116 223.12262 34.579964 238.63205 44.248543 c
254.1414 53.917168 279.28699 53.917168 294.79636 44.248543 c
310.30576 34.579964 310.30576 18.904116 294.79636 9.2355385 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -23 406 cm
317.79636 396.76447 m
302.28699 406.43307 277.14139 406.43307 261.63205 396.76447 c
246.12262 387.09589 246.12262 371.42004 261.63205 361.75146 c
277.14139 352.08282 302.28699 352.08282 317.79636 361.75146 c
333.30576 371.42004 333.30576 387.09589 317.79636 396.76447 c
S
0 i
1 0.75 1 sc
CM
526.79633 112.73554 m
511.28699 103.06691 486.14139 103.06691 470.63205 112.73554 c
455.12262 122.40411 455.12262 138.07997 470.63205 147.74854 c
486.14139 157.41718 511.28699 157.41718 526.79633 147.74854 c
542.30579 138.07997 542.30579 122.40411 526.79633 112.73554 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -23 406 cm
549.79633 293.26447 m
534.28699 302.93307 509.14139 302.93307 493.63205 293.26447 c
478.12262 283.59589 478.12262 267.92004 493.63205 258.25146 c
509.14139 248.58282 534.28699 248.58282 549.79633 258.25146 c
565.30579 267.92004 565.30579 283.59589 549.79633 293.26447 c
S
162.87912 355.88205 m
196.91415 309.53171 l
S
0 i
CM
179.5961 104.20621 m
171.01244 98.59903 l
176.81587 94.337563 l
h
179.5961 104.20621 m
f
0 J
0 j
1 0 0 -1 -23 406 cm
202.5961 301.79379 m
194.01244 307.40097 l
199.81587 311.66245 l
h
202.5961 301.79379 m
S
1 J
1 j
0.60000002 i
274.07791 355.45862 m
244.43382 310.33856 l
S
0 i
CM
216.16249 103.68471 m
218.42509 93.684669 l
224.44257 97.638176 l
h
216.16249 103.68471 m
f
0 J
0 j
1 0 0 -1 -23 406 cm
239.16249 302.31531 m
241.42509 312.31534 l
247.44257 308.36182 l
h
239.16249 302.31531 m
S
1 J
1 j
[
8
8
] 0 d
0.60000002 i
411.00003 275.75797 m
468.09998 275.75797 l
S
0 i
CM
454.69998 130.24203 m
445.09998 133.84204 l
445.09998 126.64204 l
h
454.69998 130.24203 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -23 406 cm
477.69998 275.75797 m
468.09998 272.15796 l
468.09998 279.35797 l
h
477.69998 275.75797 m
S
1 J
1 j
[
8
8
] 0 d
0.60000002 i
634 275.75797 m
575.32843 275.75797 l
S
0 i
CM
542.72839 130.24203 m
552.32843 126.64204 l
552.32843 133.84204 l
h
542.72839 130.24203 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -23 406 cm
565.72839 275.75797 m
575.32843 279.35797 l
575.32843 272.15796 l
h
565.72839 275.75797 m
S
1 1 0.75 sc
CM
839.08215 112.73554 m
823.57281 103.06691 798.42719 103.06691 782.91785 112.73554 c
767.40845 122.40411 767.40845 138.07997 782.91785 147.74854 c
798.42719 157.41718 823.57281 157.41718 839.08215 147.74854 c
854.59155 138.07997 854.59155 122.40411 839.08215 112.73554 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -23 406 cm
862.08215 293.26447 m
846.57281 302.93307 821.42719 302.93307 805.91785 293.26447 c
790.40845 283.59589 790.40845 267.92004 805.91785 258.25146 c
821.42719 248.58282 846.57281 248.58282 862.08215 258.25146 c
877.59155 267.92004 877.59155 283.59589 862.08215 293.26447 c
S
0 i
0.75 0.75 1 sc
CM
987.65375 112.73554 m
972.14441 103.06691 946.99878 103.06691 931.48944 112.73554 c
915.98004 122.40411 915.98004 138.07997 931.48944 147.74854 c
946.99878 157.41718 972.14441 157.41718 987.65375 147.74854 c
1003.1632 138.07997 1003.1632 122.40411 987.65375 112.73554 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -23 406 cm
1010.6537 293.26447 m
995.14441 302.93307 969.99878 302.93307 954.48944 293.26447 c
938.98004 283.59589 938.98004 267.92004 954.48944 258.25146 c
969.99878 248.58282 995.14441 248.58282 1010.6537 258.25146 c
1026.1632 267.92004 1026.1632 283.59589 1010.6537 293.26447 c
S
0 i
0.75 0.75 1 sc
CM
759.79633 209.73553 m
744.28699 200.06691 719.14142 200.06691 703.63208 209.73553 c
688.12262 219.40411 688.12262 235.07997 703.63208 244.74854 c
719.14142 254.41718 744.28699 254.41718 759.79633 244.74854 c
775.30579 235.07997 775.30579 219.40411 759.79633 209.73553 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -23 406 cm
782.79633 196.26447 m
767.28699 205.93309 742.14142 205.93309 726.63208 196.26447 c
711.12262 186.59589 711.12262 170.92003 726.63208 161.25146 c
742.14142 151.58282 767.28699 151.58282 782.79633 161.25146 c
798.30579 170.92003 798.30579 186.59589 782.79633 196.26447 c
S
0 i
0.75 0.75 1 sc
CM
907.08215 212.23553 m
891.57281 202.56691 866.42719 202.56691 850.91785 212.23553 c
835.40845 221.90411 835.40845 237.57997 850.91785 247.24854 c
866.42719 256.91718 891.57281 256.91718 907.08215 247.24854 c
922.59155 237.57997 922.59155 221.90411 907.08215 212.23553 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -23 406 cm
930.08215 193.76447 m
914.57281 203.43309 889.42719 203.43309 873.91785 193.76447 c
858.40845 184.09589 858.40845 168.42003 873.91785 158.75146 c
889.42719 149.08282 914.57281 149.08282 930.08215 158.75146 c
945.59155 168.42003 945.59155 184.09589 930.08215 193.76447 c
S
724.32837 284 m
794.71417 284 l
S
0 i
CM
691.72839 122 m
701.32837 118.4 l
701.32837 125.6 l
h
691.72839 122 m
f
0 J
0 j
1 0 0 -1 -23 406 cm
714.72839 284 m
724.32837 287.60001 l
724.32837 280.39999 l
h
714.72839 284 m
S
1 J
1 j
0.60000002 i
885.83209 199.91541 m
857.44659 241.4501 l
S
0 i
CM
829.02991 156.62401 m
837.41876 162.51863 l
831.47437 166.58115 l
h
829.02991 156.62401 m
f
0 J
0 j
1 0 0 -1 -23 406 cm
852.02991 249.37599 m
860.41876 243.48137 l
854.47437 239.41885 l
h
852.02991 249.37599 m
S
1 J
1 j
0.60000002 i
773.42932 201.65448 m
807.12091 242.87346 l
S
0 i
CM
790.19641 155.69363 m
786.9082 165.40486 l
781.33356 160.84822 l
h
790.19641 155.69363 m
f
0 J
0 j
1 0 0 -1 -23 406 cm
813.19641 250.30637 m
809.9082 240.59514 l
804.33356 245.15178 l
h
813.19641 250.30637 m
S
1 J
1 j
0.60000002 i
874.71423 275.75797 m
928.9574 275.75797 l
S
0 i
CM
915.55737 130.24203 m
905.9574 133.84204 l
905.9574 126.64204 l
h
915.55737 130.24203 m
f
0 J
0 j
1 0 0 -1 -23 406 cm
938.55737 275.75797 m
928.9574 272.15796 l
928.9574 279.35797 l
h
938.55737 275.75797 m
S
0.75 0.75 1 sc
CM
763.08215 9.2355385 m
747.57281 -0.43308806 722.42719 -0.43308806 706.91785 9.2355385 c
691.40845 18.904116 691.40845 34.579964 706.91785 44.248543 c
722.42719 53.917168 747.57281 53.917168 763.08215 44.248543 c
778.59155 34.579964 778.59155 18.904116 763.08215 9.2355385 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -23 406 cm
786.08215 396.76447 m
770.57281 406.43307 745.42719 406.43307 729.91785 396.76447 c
714.40845 387.09589 714.40845 371.42004 729.91785 361.75146 c
745.42719 352.08282 770.57281 352.08282 786.08215 361.75146 c
801.59155 371.42004 801.59155 387.09589 786.08215 396.76447 c
S
0 i
0.75 0.75 1 sc
CM
907.08215 9.2355385 m
891.57281 -0.43308806 866.42719 -0.43308806 850.91785 9.2355385 c
835.40845 18.904116 835.40845 34.579964 850.91785 44.248543 c
866.42719 53.917168 891.57281 53.917168 907.08215 44.248543 c
922.59155 34.579964 922.59155 18.904116 907.08215 9.2355385 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -23 406 cm
930.08215 396.76447 m
914.57281 406.43307 889.42719 406.43307 873.91785 396.76447 c
858.40845 387.09589 858.40845 371.42004 873.91785 361.75146 c
889.42719 352.08282 914.57281 352.08282 930.08215 361.75146 c
945.59155 371.42004 945.59155 387.09589 930.08215 396.76447 c
S
775.16492 355.88205 m
809.19995 309.53171 l
S
0 i
CM
791.8819 104.20621 m
783.29822 98.59903 l
789.10168 94.337563 l
h
791.8819 104.20621 m
f
0 J
0 j
1 0 0 -1 -23 406 cm
814.8819 301.79379 m
806.29822 307.40097 l
812.10168 311.66245 l
h
814.8819 301.79379 m
S
1 J
1 j
0.60000002 i
886.36371 355.45862 m
856.7196 310.33856 l
S
0 i
CM
828.4483 103.68471 m
830.71088 93.684669 l
836.72839 97.638176 l
h
828.4483 103.68471 m
f
0 J
0 j
1 0 0 -1 -23 406 cm
851.4483 302.31531 m
853.71088 312.31534 l
859.72839 308.36182 l
h
851.4483 302.31531 m
S
1 J
1 j
0.60000002 i
329.42841 280.84766 m
271.96771 280.84766 l
S
0 i
CM
239.36772 125.15234 m
248.96773 121.55235 l
248.96773 128.75235 l
h
239.36772 125.15234 m
f
0 J
0 j
1 0 0 -1 -23 406 cm
262.36774 280.84766 m
271.96771 284.44766 l
271.96771 277.24765 l
h
262.36774 280.84766 m
S
1 J
1 j
0.60000002 i
714.42841 270 m
784.81421 270 l
S
0 i
CM
771.41418 136 m
761.81421 139.60001 l
761.81421 132.39999 l
h
771.41418 136 m
f
0 J
0 j
1 0 0 -1 -23 406 cm
794.41418 270 m
784.81421 266.39999 l
784.81421 273.60001 l
h
794.41418 270 m
S
/Cs2 SC
0 sc
1 0 0 -1 811 132.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-24.152 5.776001 m
(!"#$%)[ 8.896000 9.184000 9.488000 8.592000 0.000000 ] xS
/F2.1[ 16 0 0 -16 0 0]sf
16.455999 5.776001 m
(")s
1 0 0 -1 499.5 131.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-22.08 5.776001 m
(!"#$%)[ 8.896000 9.184000 9.488000 8.592000 0.000000 ] xS
/F2.1[ 16 0 0 -16 0 0]sf
18.528 5.776001 m
(#)s
ep
end
%%Trailer
%%EOF
